"""
Module pour g√©n√©rer et ajouter des embeddings Gemini aux documents MeiliSearch.
Ce script peut √™tre ex√©cut√© de mani√®re autonome pour traiter les documents existants.
"""

import os
import sys
import logging
import time
from typing import List
from pathlib import Path
import meilisearch
from google import genai
from dotenv import load_dotenv
from tqdm import tqdm

# --- Configuration ---
env_path = Path(__file__).parent.parent / '.env'
load_dotenv(dotenv_path=env_path)

# Configurer un logger d√©di√©
gemini_logger = logging.getLogger("gemini_embedder")
gemini_logger.setLevel(logging.INFO)
if not gemini_logger.handlers:
    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
    gemini_logger.addHandler(handler)


class QuotaExceededError(Exception):
    """Exception lev√©e lorsque le quota de l'API Gemini est d√©pass√©."""
    pass


class MeiliSearchGemini:
    """G√®re l'indexation avec embeddings Gemini dans MeiliSearch."""

    def __init__(self, meili_url: str, meili_key: str, gemini_api_key: str):
        self.client = meilisearch.Client(meili_url, meili_key)
        self.embedding_model = "text-embedding-004"

        try:
            self.gemini_client = genai.Client(api_key=gemini_api_key)
            gemini_logger.info("‚úì Gemini API client initialis√©.")
        except Exception as e:
            gemini_logger.error(f"‚ùå Erreur lors de l'initialisation du client Gemini: {e}")
            self.gemini_client = None

        gemini_logger.info(f"‚úì MeiliSearch connect√© √† {meili_url}")
        gemini_logger.info(f"‚úì Mod√®le d'embedding: {self.embedding_model}")

    def get_embeddings_batch(self, texts: List[str]) -> List[List[float]]:
        """G√©n√®re des embeddings pour un lot de textes."""
        if not self.gemini_client:
            gemini_logger.error("Client Gemini non initialis√©. Impossible de g√©n√©rer les embeddings.")
            return [[] for _ in texts]

        try:
            result = self.gemini_client.models.embed_content(
                model=self.embedding_model,
                contents=texts
            )
            return [embedding.values for embedding in result.embeddings]
        except Exception as e:
            error_str = str(e).lower()
            if "quota" in error_str or "resource exhausted" in error_str:
                gemini_logger.error(f"üõë Quota Gemini d√©pass√©: {e}")
                raise QuotaExceededError(str(e))
            gemini_logger.error(f"‚ùå Erreur API Gemini: {e}")
            return [[] for _ in texts]

    def check_embedder_config(self, index_name: str) -> bool:
        """V√©rifie que les embedders sont bien configur√©s."""
        try:
            index = self.client.index(index_name)
            settings = index.get_settings()
            embedders = settings.get('embedders', {})

            has_default = 'default' in embedders
            has_query = 'query' in embedders

            if has_default and has_query:
                gemini_logger.info("‚úì Embedders 'default' et 'query' d√©j√† configur√©s")
                return True
            else:
                missing = []
                if not has_default:
                    missing.append('default')
                if not has_query:
                    missing.append('query')
                gemini_logger.warning(f"‚ö†Ô∏è  Embedders manquants: {', '.join(missing)}")
                gemini_logger.warning("   Ex√©cutez d'abord: python configure_and_check_meilisearch.py")
                return False
        except Exception as e:
            gemini_logger.error(f"‚ùå Erreur lors de la v√©rification: {e}")
            return False

    def process_missing_embeddings(self, index_name: str, batch_size: int = 50):
        """Trouve les documents sans embeddings, les g√©n√®re et met √† jour l'index."""
        # V√©rifier d'abord que les embedders sont configur√©s
        if not self.check_embedder_config(index_name):
            print("\n‚ùå Configuration incompl√®te. Arr√™t du processus.")
            return

        index = self.client.index(index_name)
        print("\nüîç Recherche des documents sans embeddings...")

        try:
            search_res = index.search('', {'filter': '_vectors.default NOT EXISTS', 'limit': 0})
            total_missing = search_res.get('estimatedTotalHits', 0)
        except Exception as e:
            print(f"‚ùå ERREUR: Impossible de compter les documents: {e}")
            return

        if total_missing == 0:
            print("üéâ Tous les documents ont d√©j√† des embeddings. Aucune action requise.")
            return

        print(f"üìä Trouv√©: {total_missing} documents sans embeddings")
        print(f"‚öôÔ∏è  Batch size: {batch_size} documents")
        print(f"üîÑ Estimation: ~{(total_missing // batch_size) + 1} requ√™tes API Gemini\n")

        with tqdm(total=total_missing, desc="üìù G√©n√©ration", unit="doc", file=sys.stdout) as pbar:
            processed_docs_count = 0
            successful_updates = 0
            quota_exceeded = False

            while processed_docs_count < total_missing and not quota_exceeded:
                try:
                    docs_to_process = index.get_documents({
                        'filter': '_vectors.default NOT EXISTS',
                        'limit': batch_size,
                        'fields': ['id', 'title', 'content']
                    }).results
                except Exception as e:
                    print(f"\n‚ùå ERREUR: R√©cup√©ration des documents: {e}")
                    time.sleep(5)
                    continue

                if not docs_to_process:
                    break  # Termin√©

                # Pr√©parer les textes pour l'embedding
                texts_to_embed = []
                doc_ids = []

                for doc in docs_to_process:
                    title = getattr(doc, 'title', '')
                    content = getattr(doc, 'content', '')
                    text = f"{title}\n{content}".strip()

                    if text:  # Ne traiter que les docs avec du contenu
                        texts_to_embed.append(text)
                        doc_ids.append(doc.id)

                if not texts_to_embed:
                    processed_docs_count += len(docs_to_process)
                    pbar.update(len(docs_to_process))
                    continue

                # G√©n√©rer les embeddings
                try:
                    embeddings = self.get_embeddings_batch(texts_to_embed)
                except QuotaExceededError:
                    print("\nüõë Quota Gemini d√©pass√©. Arr√™t du processus.")
                    quota_exceeded = True
                    break

                # Pr√©parer les mises √† jour
                docs_to_update = []
                for doc_id, embedding in zip(doc_ids, embeddings):
                    if embedding and len(embedding) == 768:
                        docs_to_update.append({
                            'id': doc_id,
                            '_vectors': {'default': embedding}
                        })

                # Mettre √† jour MeiliSearch
                if docs_to_update:
                    try:
                        task = index.update_documents(docs_to_update)
                        # Attendre que la t√¢che se termine
                        self.client.wait_for_task(task.task_uid, timeout_in_ms=30000)
                        successful_updates += len(docs_to_update)
                    except Exception as e:
                        print(f"\n‚ùå ERREUR: Mise √† jour MeiliSearch: {e}")

                processed_docs_count += len(docs_to_process)
                pbar.update(len(docs_to_process))

                # Petit d√©lai pour √©viter de saturer l'API
                time.sleep(0.5)

        # R√©sum√©
        print("\n" + "="*60)
        if quota_exceeded:
            print(f"‚ö†Ô∏è  Processus interrompu (quota d√©pass√©)")
        else:
            print(f"‚úÖ Processus termin√©")
        print(f"üìä Documents trait√©s: {processed_docs_count}")
        print(f"‚úì  Embeddings ajout√©s: {successful_updates}")
        if processed_docs_count > successful_updates:
            print(f"‚ö†Ô∏è  √âchecs: {processed_docs_count - successful_updates}")
        print("="*60)


if __name__ == "__main__":
    MEILI_URL = os.getenv("MEILI_URL")
    MEILI_KEY = os.getenv("MEILI_KEY")
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
    INDEX_NAME = os.getenv("INDEX_NAME", "kidsearch")

    if not all([MEILI_URL, MEILI_KEY, GEMINI_API_KEY]):
        print("‚ùå ERREUR: MEILI_URL, MEILI_KEY, et GEMINI_API_KEY doivent √™tre d√©finis dans .env")
        sys.exit(1)

    try:
        meili_gemini = MeiliSearchGemini(
            meili_url=MEILI_URL,
            meili_key=MEILI_KEY,
            gemini_api_key=GEMINI_API_KEY
        )
        meili_gemini.process_missing_embeddings(INDEX_NAME)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Interruption utilisateur (Ctrl+C)")
        print("üí° Vous pouvez relancer le script pour continuer o√π il s'est arr√™t√©")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Une erreur inattendue est survenue: {e}")
        sys.exit(1)